Hi Good afternoon everyone, my name is Jerry, today my presentation will be on my capstone 3 project


1) intro of project fill in, talk about version 1 what project is suppose to do etc, take parts from your read me, we wil focus more on the back end of things



2)phase 1
building a REST API for managing product categories in an e-commerce system. categoires is a way to group like products

[Client/Frontend] 
       ↓ HTTP Request
[CategoriesController] ← You implement the REST endpoints here -(Purpose: Handles HTTP requests (GET, POST, PUT, DELETE),Contains: All the endpoint methods you need to implement, Role: The "front door" - receives requests and sends responses, implement 5 methods)
       ↓ Calls methods
[CategoryDao Interface] ← Contract/Blueprint (Purpose: Defines what database operations should exist, Contains: Method signatures like getAllCategories(), create(), etc., Role: A contract that MySqlCategoryDao must follow)
       ↓ Implemented by
[MySqlCategoryDao] ← You implement the database operations here- (Purpose: Actually talks to the MySQL database, Contains: SQL queries and database operations, Role: The "database worker" - does the actual data storage/retrieval)
       ↓ Uses
[MySqlDaoBase] ← Provides database connection-(Purpose: Provides database connection to all DAO classes, Contains: getConnection() method, Role: Shared database connection logic- saves/retrieves data from MySQL)
       ↓ Connects to
[DatabaseConfig] ← Database setup-(Purpose: Configures database connection settings, Contains: DataSource bean configuration, Role: Sets up how to connect to database) 
       ↓ Returns
[Category Model] ← The data structure- (define what the category looks like, contains categoryId, name, description,Role: Like a blueprint for category data)
       ↓ Sent back as
[JSON Response] → [Client/Frontend]

----------------------------------------------------
1) ProductController.java
first thing I made changes to when I was reviewing the existing code that was given to me.

updateProduct(@PathVariable int id)- needed to have this added into the parameter to indicate which product to update 
and if my memory serves me correctly it was .create so I changed it to .update() because thats what this method is doing

when I was playing around with front end I also realized nothing really worked outside of us getting all the products, the category didnt have any additional selections, shopping cart didnt work, and min and max didnt work(also that there was 2 mins) but we will get to these issues later 
------------------

2)went into phase 1 categoriesController- manages the product categories, everyone can browse but we use @PreAuthorize("hasRole('ROLE_ADMIN')"), @PreAuthorize("permitAll()"), and ROLE_USER
in each method to determine who is able to access these methods, so any user can browse all categories or look up a specific category, but only admin users can make changes, such as add, delete, or update 
I then had to go into MySqlCategoryDao- adn fill it in with the proper String sql queries so it extracts the right information for us

point them to the completion of easyshop solo,test were run and passed
----------------------------------
3)phase 2- fixing bugs

ProductsController- only administrators are allowed to insert, update or delete products. just like category controller we used @PreAuthorize("hasRole('ROLE_ADMIN')") to restrict access 

search function for product was presenting incorrect results when testing - POINT TOO the postman query you did for cat, minPrice, max price, color example

so I had the implementation, change it so it returned the correct thing

to correct the min and max, I had to go into MySqlProductionDao to add a max in the query because it was missing, also needed to add max in prepared statemet, this goes back to when I was playing with the front end originally minimum worked but max didnt, but also because there wasn't a max it was just 2 minimum- After I changed this I went into the website part of the code I think it was home.html and corrected it to maximu price and show it on the website

bug 2 - 
duplicate that was the .create instead of .update in the ProductController that I already corrected. so i went in and deleted all version expect the most recent.


4)option 3 shopping cart- no longer use preauthorize permit all it had to be ROLE_USER, because it should only be available to logged in users 

its simple if the current suer shopping cart does not yet include the product id then you add it(with the userid productid) and if it is in the cart then you update it

- show this in front end portion. also clear shopping cart 







